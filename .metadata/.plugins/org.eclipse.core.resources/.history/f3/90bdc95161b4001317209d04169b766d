import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;

/**
 * 
 * @author Robert Mina
 * @author Jenny Xing
 * 
 * A class that implements an AI to play 2d tic-tac-toe with 2 players.
 *
 */

public class tttBot {

	private tttBoard board;
	private int id; //the player # of this object
	
	public tttBot(tttBoard board, int id) {
		this.board = board;
		this. id = id;
	}
	
	/**
	 * @return int representing key of spot to be taken
	 */
	public int move() {
		HashSet<Integer> openSpots = board.getOpenSpots();
		HashSet<Integer> myPairs = board.getPlayerPairs(id);
		HashSet<Integer> oppPairs = board.getPlayerPairs(id==0 ? 1 : 0);
		
		if (openSpots.size() == 0) return -1; //no open spots
		
		int key;
		if ((key = findWin(openSpots, myPairs)) != -1) return key;
		if ((key = findWinBlock(openSpots, oppPairs)) != -1) return key;
		return 0;
	}

	/**
	 * Find a move that will win on this turn
	 * @param openSpots
	 * @param myPairs
	 * @return int representing move to make, or -1 if no winning move found
	 */
	private int findWin(HashSet<Integer> openSpots, HashSet<Integer> myPairs) {
		int winningMove;
		for (int i : myPairs) {
			winningMove = board.magicNum-i;
			if (winningMove < 0) continue;
			if (openSpots.contains(winningMove)) return winningMove;
		}
		return -1;
	}
	
	/**
	 * Find a move that will block an opponent win on next turn
	 * @param openSpots
	 * @param oppPairs
	 * @return int representing move to make, or -1 if not blocking move found
	 */
	private int findWinBlock(HashSet<Integer> openSpots, HashSet<Integer> oppPairs) {
		int blockingMove;
		for (int i : oppPairs) {
			blockingMove = board.magicNum-i;
			if (blockingMove < 0) continue;
			if (openSpots.contains(blockingMove)) return blockingMove;
		}
		return -1;
	}

	/**
	 * Because we are using HashSet, this will be an expensive O(n) operation.
	 * @param openSpots
	 * @return int representing random move
	 */
	private int randomMove(HashSet<Integer> openSpots) {
		Random myRand = new Random();
		while (true) {
			int next = myRand.nextInt(board.size * board.size)
		}
	}
	
	public int randomMove() {
		HashSet<Integer> openSpots = board.getOpenSpots();
		return randomMove(openSpots);
	}
}
