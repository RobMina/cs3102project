import java.util.HashMap;
import java.util.HashSet;

/**
 * @author Robert Mina (ram2aq)
 * @author Jenny Xing (yx4qu)
 * 
 *         A class that represents a tree of all possible TTT boards descending
 *         from a particular board configuration.
 */
public class TttGameTree {

	private TttBoard root;
	private int toMove; // player # of who is about to move
	private HashMap<Integer, TttGameTree> children;
	private int treeCount = 0;

	/**
	 * 
	 * @param parent
	 *            's board
	 * @param key
	 *            of the spot that was previously taken
	 * @param player
	 *            who just moved
	 */
	public TttGameTree(TttGameTree parent, int key, int player) {
		toMove = player == 1 ? 0 : 1;
		root = new TttBoard(parent.root);
		root.moveSuppressWin(player, key);
		children = new HashMap<Integer, TttGameTree>();
	}

	public TttGameTree(TttBoard rootBoard, int toMove) {
		root = rootBoard;
		this.toMove = toMove;
		children = new HashMap<Integer, TttGameTree>();
		populateChildren();
	}

	public int populateChildren() {
		System.out.println("Calling populateChildren on this board:");
		root.printBoardMap();
		int count = 0;
		HashSet<Integer> openSpots = root.getOpenSpots();
		for (int key : openSpots) {
			if (!children.containsKey(key)) {
				children.put(key, new TttGameTree(this, key, toMove));
				count++;
				System.out.println(count);
				treeCount++;
				if (treeCount > 1000)
					break;
			}
		}
		System.out.println(children.size());
		for (int key : children.keySet()) {
			TttGameTree child = children.get(key);
			int temp = child.populateChildren(1000 - treeCount);
			if (temp == 0) return count;
			count += temp;
			//System.out.println(temp);
			//System.out.println(count);
			treeCount += temp;
			if (treeCount > 1000)
				break;
		}

		return count;
	}

	private int populateChildren(int max) {
		int count = 0;
		HashSet<Integer> openSpots = root.getOpenSpots();
System.out.println("Calling populateChildren with max=" + max + " and board: ");
root.printBoardMap();
		for (int key : openSpots) {
			if (!children.containsKey(key)) {
				children.put(key, new TttGameTree(this, key, toMove));
				count++;
				treeCount++;
				if (count > max)
					break;
			}
		}
		for (TttGameTree child : children.values()) {
			int temp = child.populateChildren(max - count);
			count += temp;
			treeCount += temp;
			if (count > max)
				break;
		}
		return count;
	}

	public TttGameTree selectChild(int key) {
		TttGameTree newRoot = children.get(key);
		newRoot.populateChildren();
		return newRoot;
	}

	public boolean isWin(int player) {
		HashSet<Integer> pairs = (player == 0) ? root.getPlayer0Pairs() : root
				.getPlayer1Pairs();
		for (int i : pairs)
			if (i == root.magicNum)
				return true;
		return false;
	}

	public int findBestMove() {
		int opponent = (toMove == 0) ? 1 : 0;
		if (children.size() == 0) // we ran out of boards to check
			return -1;
		for (int key : children.keySet()) {
			// look through direct children for win or block
			// winning move
			if (children.get(key).isWin(toMove))
				return key;
			// blocking move
			else if (children.get(key).isWin(opponent))
				return key;
		}
		// look through indirect descendants for win or block
		for (int key : children.keySet()) {
			int ret = children.get(key).findBestMove();
			if (ret != -1)
				return ret;
			if (ret == -1 && children.get(key).children.size() == 0)
				break;
		}
		return -1;
	}

}