
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeSet;


public class tttBoard {

	int size;
	int magicNum;
	String player0;
	String player1;
	HashMap<Integer, String> boardMap;
	HashMap<Integer, Integer> perfectSquare;
	TreeSet<Integer> player0Spots;
	TreeSet<Integer> player1Spots;
	
	public tttBoard(Integer size, String p0, String p1) {
		this.size = size;
		magicNum = size * (size * size + 1) / 2;
		player0 = p0;
		player1 = p1;
		boardMap = new HashMap<Integer, String>(size*size, (float) 1.0);
		perfectSquare = new HashMap<Integer, Integer>(size*size, (float) 1.0);
		loadPerfectSquare();
	}
	
	private void loadPerfectSquare() {
		//load Integer values into the correct values in the perfectSquare map
	}
	
	//params x and y: coordinates within the square
	//return int key corresponding to the key in the maps for those coords
	private int getKey(int x, int y) {
		return x + size*y;
	}
	
	//param player: 0 or 1, the player number
	//params x and y: coordinates within the square
	//return boolean true if move successful, false otherwise
	private boolean move(int player, int x, int y) {
		if (boardMap.containsKey(getKey(x,y))) { //already occupied
			return false;
		}
		if (player != 0 && player != 1) { //invalid player
			return false;
		}
		if (x >= size || y >= size) { //invalid coords
			return false;
		}
		//valid move
		boardMap.put(getKey(x,y),player==1 ? player1 : player0);
		if (player==1) {
			player1Spots.add(perfectSquare.get(getKey(x,y)));
		}
		else {
			player0Spots.add(perfectSquare.get(getKey(x,y)));
		}
		return true;
	}
	
	//check for win or draw conditions
	private void check() {
		if (player0Spots.size()<size && player1Spots.size()<size)
			return; //not possible that someone has won
		int[] nPair = new int[size];
		int[] nIndices = new int[size];
		ArrayList<Integer> player0SpotsList = new ArrayList<Integer>(player0Spots);
		for (int i=0; i<player0SpotsList.size()-size; i++) {
			//loop over elements in the list, grabbing each possible
			//combination of size spots and seeing if they sum to the magic number
			for (int j=0; j<size-1; j++) { //assign indices
				nIndices[j] = i+j;
				nPair[j] = player0SpotsList.get(nIndices[j]);
			} //indices default to first unchecked size elements
			while (true) {
				int sum = sum(nPair);
				if (sum == magicNum) {
					win(player0);
					return;
				}
				else if (sum > magicNum) break; //continue to next starting digit
				else { //re-assign indices and nPair
					if (nIndices[size-1] == player0SpotsList.size()) 
						break; //no more nPairs with this first value
					
				}
			}
		}
	}
	
	private int sum(int[] nPair) {
		int retval = 0;
		for (int i=0; i<size; i++) {
			retval += nPair[i];
		}
		return retval;
	}
	
	//perform the winning operation given the winner
	private void win(String winner) {
		
	}

}