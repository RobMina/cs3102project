HALT!
"A tic-tac-toe board can be represented as a perfect square where every cell is represented 
by a unique integer in the range 1 to 9 (see Figure 1). Notice, that every row, column, and 
diagonal sums to 15, and there is no way to get a sum of 15 from three cells unless they share a 
row, column or diagonal." -http://rowdy.msudenver.edu/~gordona/cs1050/progs/tictactoermccsc.pdf
let x = number of ways to add up to the magic number using the numbers from 1 to order^2
let y = number of winning paths in a standard game of 2-d tic tac toe
they must be strictly equal (if x<y, then a magic square cannot be constructed. if x>y then the algorithm cannot be used)
this property is unique(?) to the 3x3 2 dimensional magic square: 
the number of ways to add up to 15 using 3 different numbers from 1-9 is the same as the number of winning paths in a standard game of tic tac toe, which is 8. 
even increasing the board to 4x4 in 2D violates this rule. 
LINKS:
http://www.one-tab.com/page/TeI0NRYHSfuBKxCd9P7GhA

IDEAS:
•	*representing the board using magic squares
•	taking turns (map)
•	*computing the magic square/cube/n dimensions 
•	moving pieces
•	key=size^0*x(0) + size^1*x(1)+(size)(n-1) x(n-1) 
•	multiplayer (size-1 players)

TODO:
•	write testing engine/AI
•	account for multiple dimensions
•	different rules (being able to move pieces)?
•	runtime of magicSquare generator
•	binary rep. of magicSquare
•	memory efficiency vs algorithm efficiency
•	where to cap the size (max of 1 million spaces, 12 dimensions-nth root of 1 million)
•	Start project writeup


***3/30/14***

for a standard/simple magic cube (dim=3) on size 3, the magic number is 42
the sum of each row, column, pillar, and 4 main space diagonals=42
perfect magic cube: every cross section diagonal=42 (if not, it's a semiperfect magic cube)

so what exactly are the rules for 3D (and beyond) tic tac toe?
if a standard magic cube is constructed, that means we can't have wins on a cross section diagonal.
perfect magic cubes of sizes 2-4 do not exist, and it's difficult to construct perfect magic cubes beyond size 10. 
(magic cubes of size 5&6 were only discovered in 2003)

should we define a magic cube/hypercube one in which all possble lines of n cells (n is the size) sum up to be the magic number?
(all lower dimension hypercubes of the same size contained in it will be perfect as well)
would it be easier if we just brute force it rather than trying to construct the magic cube/hypercube?

***4/5/14***
implement pairing strategy?
take magic hypercubes from mathematica (encode as binary file)
superclass of AI, multiple subclasses (use board size and dimension (user input) to determine which AI will be used) 
	dumb AI: pick the center spot, takes winning move or blocks a winning move, or then random spot 
	best play AI: searches the entire game tree. use magic hypercubes.  
	pairing AI: use pairing strategy if the board satisfies the condition for the pairing strategy 
separate class to determine whether the pairing strategy can be used
presentation wise: ppt, include equations and findings and screen captures of sample game (with analysis)

***4/9/14***
I'm writing a new class that takes care of the magic square/cube stuff. how do we want to integrate/disintegrate this into our tttBoard?
do you want to keep the the 2D board separate from the higher dimension boards?
reduce file size for magic squares/cubes
eventually combine 2D and higher dimensions boards (keep everything though)
how to gather magic cube/square data from websites... do we have anything for higher dimensions?
