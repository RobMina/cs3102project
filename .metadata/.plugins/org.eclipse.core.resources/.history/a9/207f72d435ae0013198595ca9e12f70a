/**
 * @author Robert Mina (ram2aq)
 * @author Jenny Xing (yx4qu)
 * 
 * Class for an n-dimensional tic-tac-toe board using magic n-cubes to determine winner
 */

import java.util.*;

public class genTTTBoard {

	private int size;
	private int magicNum;
	private int dimension;
	private String player0;
	private String player1;
	private HashMap<Integer, Integer> boardMap;
	private HashMap<Integer, Integer> magicCube;
	private TreeSet<Integer> player0Spots;
	private TreeSet<Integer> player1Spots;
	private TreeSet<Integer> openSpots;
	private TreeSet<Integer> player0Pairs;
	private TreeSet<Integer> player1Pairs;

	final int MAX_SPACES = 1000000;

	public static void main(String args[]) {

	}

	public genTTTBoard(Integer size, Integer dim, String p0, String p1) {
		this.size = size;
		dimension = dim;
		magicNum = (size * (pow(size, dimension) + 1)) / 2;
		player0 = p0;
		player1 = p1;
		boardMap = new HashMap<Integer, Integer>(pow(size, dim), (float) 1.0);
		magicCube = new HashMap<Integer, Integer>(pow(size, dim), (float) 1.0);
		loadMagicCube();
		player0Spots = new TreeSet<Integer>();
		player1Spots = new TreeSet<Integer>();
		openSpots = new TreeSet<Integer>();
		loadOpenSpots();
		player0Pairs = new TreeSet<Integer>();
		player1Pairs = new TreeSet<Integer>();
	}

	public int getSize() {
		return size;
	}

	public HashMap<Integer, Integer> getBoardMap() {
		return boardMap;
	}

	public int getDimension() {
		return dimension;
	}

	// simple method to return x^exp for ints
	private int pow(int x, int exp) {
		int retval = 1;
		while (true) {
			if (exp == 0)
				break;
			retval *= x;
			exp--;
		}
		return retval;
	}

	// load all possible key values into openSpots set
	private void loadOpenSpots() {
		for (int i = 0; i < pow(size, dimension); i++) {
			openSpots.add(i);
		}
	}

	// load Integer values into the correct values in the magicSquare map
	// TODO: implement for n-dimensions
	private void loadMagicCube() {

	}

	// param coords: coordinates within the n-cube
	// return int key corresponding to the key in the maps for those coords
	private int getKey(int[] coords) {
		int retval = 0;
		for (int i = 0; i < dimension; i++) {
			retval += pow(size, i) * coords[i];
		}
		return retval;
	}

	// param player: 0 or 1, the player number
	// param coords: coordinates within the n-cube
	// return boolean true if move successful, false otherwise
	private boolean move(int player, int[] coords) {
		if (player != 0 && player != 1) {
			return false;
		}
		int key = getKey(coords);
		if (!openSpots.contains(key))
			return false;
		
		boardMap.put(key, player);
		if (player == 1) {
			player1Spots.add(key);
		}
		else player0Spots.add(key);
		openSpots.remove(key);
		check(key, player);
		updatePairs(key, player);
		return true;
	}

	// update pairs set for player to include all new possible pairs
	// NOTE: the current move HAS been added to the spots set
	private boolean updatePairs(int key, int player) {
		if (player != 0 && player != 1) { // invalid player
			return false;
		}
		if (!boardMap.contains(key)) { // invalid coords
			return false;
		}
		HashSet<Integer> pairs = (player == 0) ? player0Pairs : player1Pairs;
		HashSet<Integer> spots = (player == 0) ? player0Spots : player1Spots;
		int value = magicSquare.get(key);
		int[] nPair = new int[size - 1]; // pair of size - 1 spots
		int[] nIndices = new int[size - 2];
		nPair[size - 2] = value; // last value in nPair is the current value
		ArrayList<Integer> spotsList = new ArrayList<Integer>(spots);
		spotsList.remove(spotsList.indexOf(value)); // don't add the current
													// value twice to any pairs
		for (int i = 0; i < spotsList.size() - (size - 3); i++) {
			// loop over elements in the list, grabbing each possible
			// combination of size-2 spots
			for (int j = 0; j < size - 2; j++) { // assign indices
				nIndices[j] = i + j;
				nPair[j] = spotsList.get(nIndices[j]);
			} // indices default to first unchecked size elements
			while (true) {
				int sum = sum(nPair);
				pairs.add(sum);
				if (nIndices[size - 3] == spotsList.size() - 1)
					break; // no more nPairs with this first value
				for (int j = size - 3; j >= 0; j--) {
					nIndices[j]++;
					nPair[j] = spotsList.get(nIndices[j]);
				}
			}
		}
		return true;
	}

	// check for win or draw conditions
	// NOTE: the current move has NOT been added to relevant pairs set
	// param player: 0 or 1, the player number
	private boolean check(int key, int player) {
		if (player != 0 && player != 1) { // invalid player
			return false;
		}
		// checkWin() // deprecated
		TreeSet<Integer> pairs = (player == 0) ? player0Pairs : player1Pairs;
		String winner = (player == 0) ? player0 : player1; // not necessarily
															// the winner yet
		for (int i : pairs) {
			if (i + magicCube.get(key) == magicNum) {
				win(winner);
				return true;
			}
		}
		checkDraw();
		return true;
	}

	// method to check for draw condition
	// TODO: currently only checks that all spaces are filled
	// TODO: draw condition can occur before this is true
	private void checkDraw() {
		if (openSpots.size() == 0)
			draw();
	}

	// perform draw operation
	private void draw() {

	}

	// sum the int array
	private int sum(int[] nPair) {
		int retval = 0;
		for (int i = 0; i < nPair.length; i++) {
			retval += nPair[i];
		}
		return retval;
	}

	// perform the winning operation given the winner
	private void win(String winner) {

	}

	// x and y are the keys
	private void swapValues(int x, int y) {
		int xval = magicCube.get(x);
		int yval = magicCube.get(y);
		magicCube.put(x, yval);
		magicCube.put(y, xval);
	}

}
